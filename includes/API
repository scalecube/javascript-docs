<h1 id='api'>API</h1><h2 id='address'>Address</h2><pre class="highlight typescript tab-typescript"><code><span class="kr">interface</span> <span class="nx">Address</span> <span class="p">{</span>
  <span class="nl">host</span><span class="p">:</span> <span class="kr">string</span><span class="p">;</span>
  <span class="nl">port</span><span class="p">:</span> <span class="kr">number</span><span class="p">;</span>
  <span class="nl">protocol</span><span class="p">:</span> <span class="kr">string</span><span class="p">;</span>
  <span class="nl">path</span><span class="p">:</span> <span class="kr">string</span><span class="p">;</span>
<span class="p">}</span>
</code></pre>
<p>Address is the URI for the service.</p>

<ul>
<li>host - unique identifier that allows other computers to access it.</li>
<li>port - determine on which port number the server will receive the data.</li>
<li>protocol - rules for communication between server and client (ws | pm | tcp)</li>
<li>path - relative address.</li>
</ul>
<h2 id='asyncmodel'>AsyncModel</h2><pre class="highlight typescript tab-typescript"><code>
<span class="kd">type</span> <span class="nx">RequestStreamAsyncModel</span> <span class="o">=</span> <span class="s1">'requestStream'</span><span class="p">;</span>

<span class="kd">type</span> <span class="nx">RequestResponseAsyncModel</span> <span class="o">=</span> <span class="s1">'requestResponse'</span><span class="p">;</span>

<span class="kd">type</span> <span class="nx">AsyncModel</span> <span class="o">=</span> <span class="nx">RequestStreamAsyncModel</span> <span class="o">|</span> <span class="nx">RequestResponseAsyncModel</span><span class="p">;</span>
</code></pre>
<p>AsyncModel is the way a service can be resolved.<br>
It can be a stream and use <code>requestStream</code>
or can be a promise and use <code>requestResponse</code></p>

<ul>
<li>RequestStreamAsyncModel - Defines Stream asyncModel ( Observable, Flowable , etc.. ).</li>
<li>RequestResponseAsyncModel - Defines Async asyncModel ( Promise ).</li>
</ul>
<h2 id='cluster'>Cluster</h2><pre class="highlight typescript tab-typescript"><code><span class="kd">type</span> <span class="nx">JoinCluster</span> <span class="o">=</span> <span class="p">(</span><span class="nx">options</span><span class="p">:</span> <span class="nx">ClusterOptions</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="nx">Cluster</span><span class="p">;</span>

<span class="kr">interface</span> <span class="nx">ClusterOptions</span> <span class="p">{</span>
  <span class="nl">address</span><span class="p">:</span> <span class="nx">Address</span><span class="p">;</span>
  <span class="nx">seedAddress</span><span class="p">?:</span> <span class="nx">Address</span><span class="p">;</span>
  <span class="nl">itemsToPublish</span><span class="p">:</span> <span class="kr">any</span><span class="p">;</span>
  <span class="nx">retry</span><span class="p">?:</span> <span class="p">{</span>
    <span class="na">timeout</span><span class="p">:</span> <span class="kr">number</span><span class="p">;</span>
  <span class="p">};</span>
  <span class="nx">debug</span><span class="p">?:</span> <span class="kr">boolean</span><span class="p">;</span>
<span class="p">}</span>

<span class="kr">interface</span> <span class="nx">Cluster</span> <span class="p">{</span>
  <span class="na">getCurrentMembersData</span><span class="p">:</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="nb">Promise</span><span class="o">&lt;</span><span class="nx">MembersData</span><span class="o">&gt;</span><span class="p">;</span>
  <span class="nx">listen</span><span class="na">$</span><span class="p">:</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="nx">Observable</span><span class="o">&lt;</span><span class="nx">ClusterEvent</span><span class="o">&gt;</span><span class="p">;</span>
  <span class="nl">destroy</span><span class="p">:</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="nb">Promise</span><span class="o">&lt;</span><span class="kr">string</span><span class="o">&gt;</span><span class="p">;</span>
<span class="p">}</span>
</code></pre><pre class="highlight javascript tab-javascript"><code><span class="c1">// browser: </span>
<span class="kr">import</span> <span class="p">{</span> <span class="nx">joinCluster</span> <span class="p">}</span> <span class="nx">from</span> <span class="s1">'@scalecube/cluster-browser'</span><span class="p">;</span>
<span class="c1">// server:</span>
<span class="kr">import</span> <span class="p">{</span> <span class="nx">joinCluster</span> <span class="p">}</span> <span class="nx">from</span> <span class="s1">'@scalecube/cluster-nodejs'</span><span class="p">;</span>

<span class="kr">const</span> <span class="nx">cluster</span> <span class="o">=</span> <span class="nx">joinCluster</span><span class="p">({</span>
  <span class="na">address</span><span class="p">:</span> <span class="p">{</span> <span class="cm">/* my address */</span> <span class="p">},</span>
  <span class="na">seedAddress</span><span class="p">:</span> <span class="p">{</span><span class="cm">/* address to the distributed environment */</span><span class="p">},</span>
  <span class="na">itemsToPublish</span><span class="p">:</span> <span class="p">[</span><span class="cm">/* items to publish in the distributed environment */</span><span class="p">]</span>
<span class="p">});</span>

<span class="nx">cluster</span><span class="p">.</span><span class="nx">listen$</span><span class="p">().</span><span class="nx">subscribe</span><span class="p">((</span><span class="nx">response</span><span class="p">)</span><span class="o">=&gt;</span><span class="p">{</span><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">response</span><span class="p">)});</span>
</code></pre>
<p>create a <a href="#member">member</a> from the data it receive from the discovery,<br>
and use it in-order to share data in the distributed environment.</p>

<p>scalecube provide two cluster implementations:
* <code>@scalecube/cluster-browser</code>
* <code>@scalecube/cluster-nodejs</code></p>

<ul>
<li>address - address of the member</li>
<li>seedAddress - address of the member that act as the seed</li>
<li>itemsToPublish - item to share with the different members</li>
<li>retry - retry configuration for connecting members</li>
<li><p>debug - debug flag</p></li>
<li><p>getCurrentMembersData - resolve with the current information of the other members in the distributed environment</p></li>
<li><p>listen$ - subscribe to changes in the members state</p></li>
<li><p>destroy - resolve when cluster is destroyed</p></li>
</ul>
<h2 id='discovery'>Discovery</h2><pre class="highlight typescript tab-typescript"><code><span class="kd">type</span> <span class="nx">CreateDiscovery</span> <span class="o">=</span> <span class="p">(</span><span class="nx">options</span><span class="p">:</span> <span class="nx">DiscoveryOptions</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="nx">Discovery</span><span class="p">;</span>

<span class="kr">interface</span> <span class="nx">DiscoveryOptions</span> <span class="p">{</span>
  <span class="nl">address</span><span class="p">:</span> <span class="nx">Address</span><span class="p">;</span>
  <span class="nl">itemsToPublish</span><span class="p">:</span> <span class="nx">Item</span><span class="p">[];</span>
  <span class="nx">seedAddress</span><span class="p">?:</span> <span class="nx">Address</span><span class="p">;</span>
  <span class="nx">cluster</span><span class="p">?:</span> <span class="p">(</span><span class="nx">opt</span><span class="p">:</span> <span class="nx">ClusterOptions</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="nx">Cluster</span><span class="p">;</span>
  <span class="nx">debug</span><span class="p">?:</span> <span class="kr">boolean</span><span class="p">;</span>
<span class="p">}</span>

<span class="kr">interface</span> <span class="nx">Discovery</span> <span class="p">{</span>
  <span class="nx">discoveredItems$</span><span class="p">:</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="nx">Observable</span><span class="o">&lt;</span><span class="nx">ServiceDiscoveryEvent</span><span class="o">&gt;</span><span class="p">;</span>
  <span class="nx">destroy</span><span class="p">():</span> <span class="nb">Promise</span><span class="o">&lt;</span><span class="kr">string</span><span class="o">&gt;</span><span class="p">;</span>
<span class="p">}</span>

<span class="kd">type</span> <span class="nx">Item</span> <span class="o">=</span> <span class="kr">any</span><span class="p">;</span>
</code></pre>
<p>Discovery is a tool that connect the microservice instance to the <a href="#distributed-environment">distributed environment</a>.  </p>

<p>It convert events received from the <a href="#distributed-environment">distributed environment</a> to events that the registry can understand.</p>

<ul>
<li>address - A unique <a href="#address">address</a>.</li>
<li>itemsToPublish - The data that the discovery need to share.</li>
<li>seedAddress - the <a href="#address">address</a> we want to use in-order to connect to the distributed environment.</li>
<li>cluster - optional pluggable <a href="#cluster">cluster</a></li>
<li><p>debug - discovery logs</p></li>
<li><p>discoveredItems$ - An Observable sequence that describes all the items that published by <strong>other</strong> discoveries.<br>
Emits new array of all items each time new discovery is created or destroyed.</p></li>
<li><p>destroy - Destroy the discovery:  </p>

<ul>
<li>Completes discoveredItems$.<br></li>
<li>Notifies other discoveries that this discovery&#39;s items are not available anymore.<br></li>
<li>Resolves with the message, that specifies the <a href="#address">address</a> of the discovery.</li>
</ul></li>
</ul>
<h2 id='endpoint'>Endpoint</h2><pre class="highlight typescript tab-typescript"><code><span class="kr">interface</span> <span class="nx">Endpoint</span> <span class="p">{</span>
  <span class="nl">qualifier</span><span class="p">:</span> <span class="kr">string</span><span class="p">;</span>
  <span class="nl">serviceName</span><span class="p">:</span> <span class="kr">string</span><span class="p">;</span>
  <span class="nl">methodName</span><span class="p">:</span> <span class="kr">string</span><span class="p">;</span>
  <span class="nl">asyncModel</span><span class="p">:</span> <span class="nx">AsyncModel</span><span class="p">;</span>
  <span class="nl">address</span><span class="p">:</span> <span class="nx">Address</span><span class="p">;</span>
<span class="p">}</span>
</code></pre>
<p>Endpoint is the metadata of a service.<br>
Contain information of how to access the service.</p>

<ul>
<li>qualifier - The combination of serviceName and methodName: <serviceName/methodName></li>
<li>serviceName - The name of a service, that is provided in serviceDefinition.</li>
<li>methodName - The name of a method, that is provided in the methods map in serviceDefinition.</li>
<li>asyncModel - Type of communication between a consumer and a provider.</li>
<li>address - A unique <a href="#address">address</a> of an endpoint URI format: <protocol>://<host>:<port>/<path></li>
</ul>
<h2 id='lookup'>LookUp</h2><pre class="highlight typescript tab-typescript"><code><span class="kd">type</span> <span class="nx">LookUp</span> <span class="o">=</span> <span class="p">(</span><span class="nx">options</span><span class="p">:</span> <span class="nx">LookupOptions</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="nx">Endpoint</span><span class="p">[]</span> <span class="o">|</span> <span class="p">[];</span>

<span class="kr">interface</span> <span class="nx">LookupOptions</span> <span class="p">{</span>
  <span class="nl">qualifier</span><span class="p">:</span> <span class="kr">string</span><span class="p">;</span>
<span class="p">}</span>
</code></pre>
<p>Search for <a href="#endpoint">endPoints</a> in the registry that match the qualifier.</p>

<ul>
<li>qualifier - The combination of serviceName and methodName: <serviceName/methodName></li>
</ul>
<h2 id='message'>Message</h2><pre class="highlight typescript tab-typescript"><code><span class="kr">interface</span> <span class="nx">Message</span> <span class="p">{</span>
  <span class="nl">qualifier</span><span class="p">:</span> <span class="kr">string</span><span class="p">;</span>
  <span class="nl">data</span><span class="p">:</span> <span class="kr">any</span><span class="p">[];</span>
<span class="p">}</span>
</code></pre><pre class="highlight javascript tab-javascript"><code><span class="kr">const</span> <span class="nx">message</span> <span class="o">=</span> <span class="p">{</span>
  <span class="na">qualifier</span> <span class="p">:</span> <span class="s1">'Service/someMethod'</span><span class="p">,</span>
  <span class="na">data</span><span class="p">:</span> <span class="p">[</span><span class="s1">'value'</span><span class="p">]</span>
<span class="p">}</span>
</code></pre>
<p>structure of the data in scalecube.</p>

<ul>
<li>qualifier - The combination of serviceName and methodName: <serviceName/methodName></li>
<li>data - Arguments of the invoked function.</li>
</ul>
<h2 id='microservice'>Microservice</h2><pre class="highlight typescript tab-typescript"><code><span class="kd">type</span> <span class="nx">CreateMicroservice</span> <span class="o">=</span> <span class="p">(</span><span class="nx">options</span><span class="p">:</span> <span class="nx">MicroserviceOptions</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="nx">Microservice</span><span class="p">;</span>

<span class="k">export</span> <span class="kr">interface</span> <span class="nx">Microservice</span> <span class="p">{</span>
  <span class="nl">destroy</span><span class="p">:</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="nb">Promise</span><span class="o">&lt;</span><span class="kr">any</span><span class="o">&gt;</span><span class="p">;</span>
  <span class="nl">createProxy</span><span class="p">:</span> <span class="nx">CreateProxy</span><span class="p">;</span>
  <span class="nl">createServiceCall</span><span class="p">:</span> <span class="nx">CreateServiceCall</span><span class="p">;</span>
<span class="p">}</span>

<span class="k">export</span> <span class="kr">interface</span> <span class="nx">MicroserviceOptions</span> <span class="p">{</span>
  <span class="nx">defaultRouter</span><span class="p">?:</span> <span class="nx">Router</span><span class="p">;</span>
  <span class="nx">services</span><span class="p">?:</span> <span class="nx">Service</span><span class="p">[];</span>
  <span class="nx">seedAddress</span><span class="p">?:</span> <span class="nx">Address</span> <span class="o">|</span> <span class="kr">string</span><span class="p">;</span>
  <span class="nx">address</span><span class="p">?:</span> <span class="nx">Address</span> <span class="o">|</span> <span class="kr">string</span><span class="p">;</span>
  <span class="nx">transport</span><span class="p">?:</span> <span class="nx">Transport</span><span class="p">;</span>
  <span class="nx">cluster</span><span class="p">?:</span> <span class="p">(</span><span class="nx">opt</span><span class="p">:</span> <span class="nx">ClusterOptions</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="nx">Cluster</span><span class="p">;</span>
  <span class="nx">debug</span><span class="p">?:</span> <span class="kr">boolean</span><span class="p">;</span>
<span class="p">}</span>
</code></pre><pre class="highlight javascript tab-javascript"><code><span class="kr">import</span> <span class="p">{</span> <span class="nx">createMicroservice</span> <span class="p">}</span> <span class="nx">from</span> <span class="s1">'@scalecube/scalecube-microservice'</span><span class="p">;</span>
<span class="kr">import</span> <span class="p">{</span> <span class="nx">TransportNodeJS</span> <span class="p">}</span> <span class="nx">from</span> <span class="s1">'@scalecube/transport-nodejs'</span><span class="p">;</span>
<span class="kr">import</span> <span class="p">{</span> <span class="nx">joinCluster</span> <span class="p">}</span> <span class="nx">from</span> <span class="s1">'@scalecube/cluster-nodejs'</span><span class="p">;</span>

<span class="kr">const</span> <span class="nx">microserviceInstance</span> <span class="o">=</span> <span class="nx">createMicroservice</span><span class="p">({</span>
  <span class="na">services</span><span class="p">:</span> <span class="p">[</span><span class="cm">/* array of services */</span><span class="p">],</span>
  <span class="na">seedAddress</span> <span class="p">:</span> <span class="s1">'pm://myOrganization:8080/ServiceA'</span><span class="p">,</span>
  <span class="na">address</span> <span class="p">:</span> <span class="p">{</span>
    <span class="na">protocol</span> <span class="p">:</span> <span class="s1">'pm'</span><span class="p">,</span>
    <span class="na">host</span><span class="p">:</span> <span class="s1">'myOrganization'</span><span class="p">,</span>
    <span class="na">port</span> <span class="p">:</span> <span class="mi">8080</span><span class="p">,</span>
    <span class="na">path</span><span class="p">:</span> <span class="s1">'ServiceB'</span>
  <span class="p">},</span>
  <span class="na">transport</span><span class="p">:</span> <span class="nx">TransportNodeJS</span><span class="p">,</span> <span class="c1">// scalecube provide a default transport configuration when running on browser,</span>
  <span class="na">cluster</span><span class="p">:</span> <span class="nx">joinCluster</span><span class="p">,</span> <span class="c1">// scalecube provide a default cluster configuration when running on browser,</span>
  <span class="na">defaultRouter</span><span class="p">:</span> <span class="nx">retryRouter</span><span class="p">({</span><span class="na">period</span><span class="p">:</span><span class="mi">10</span><span class="p">}),</span>
  <span class="na">debug</span><span class="p">:</span> <span class="kc">true</span> <span class="c1">// default is false</span>
<span class="p">})</span>
</code></pre>
<ul>
<li><a href="#destroy">destroy</a> - The method is used to delete a microservice and close all the subscriptions related with it.</li>
<li><a href="#createproxy">createProxy</a> - Creates a proxy to a method and provides extra logic when is invoked.</li>
<li><p><a href="#createServiceCall">createServiceCall</a> - Exposes serviceCall to a user (not via Proxy)</p></li>
<li><p>defaultRouter - set a default router for this microservice container</p></li>
<li><p>services - An array of <a href="#service">services</a>, that will exist inside a microservice container</p></li>
<li><p>seedAddress - The seedAddress is an <a href="#address">address</a> or a <strong>string (URI format)</strong> of another microservice container in our distributed env.</p></li>
<li><p>address - An <a href="#address">address</a> or a <strong>string (URI format)</strong> for this microservice instance, other microservices can use this address to connect with this microservice container.</p></li>
<li><p>transport - a module that implements MicroserviceTransport.</p></li>
<li><p>cluster - a module that implements <a href="#cluster">Cluster</a> API</p></li>
<li><p>debug - add logs</p></li>
</ul>
<h2 id='router'>Router</h2><pre class="highlight javascript tab-javascript"><code><span class="kr">import</span> <span class="p">{</span> <span class="nx">roundRobin</span><span class="p">,</span> <span class="nx">retryRouter</span> <span class="p">}</span> <span class="nx">from</span> <span class="s1">'@scalecube/routers'</span><span class="p">;</span>

<span class="kr">const</span> <span class="nx">proxyA</span> <span class="o">=</span> <span class="nx">ms</span><span class="p">.</span><span class="nx">createProxy</span><span class="p">({</span><span class="nx">serviceDefinition</span><span class="p">,</span> <span class="na">router</span><span class="p">:</span> <span class="nx">roundRobin</span><span class="p">});</span>

<span class="kr">const</span> <span class="nx">proxyB</span> <span class="o">=</span> <span class="nx">ms</span><span class="p">.</span><span class="nx">createProxy</span><span class="p">({</span><span class="nx">serviceDefinition</span><span class="p">,</span> <span class="na">router</span><span class="p">:</span> <span class="nx">retryRouter</span><span class="p">({</span><span class="na">period</span><span class="p">:</span> <span class="mi">10</span><span class="p">})});</span>
</code></pre><pre class="highlight typescript tab-typescript"><code>
<span class="kd">type</span> <span class="nx">Router</span> <span class="o">=</span> <span class="p">(</span><span class="nx">options</span><span class="p">:</span> <span class="nx">RouterOptions</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="nb">Promise</span><span class="o">&lt;</span><span class="nx">Endpoint</span><span class="o">&gt;</span><span class="p">;</span>

<span class="kr">interface</span> <span class="nx">RouterOptions</span> <span class="p">{</span>
  <span class="nl">lookUp</span><span class="p">:</span> <span class="nx">LookUp</span><span class="p">;</span>
  <span class="nl">message</span><span class="p">:</span> <span class="nx">Message</span><span class="p">;</span>
<span class="p">}</span>


<span class="kd">type</span> <span class="nx">RetryRouter</span> <span class="o">=</span> <span class="p">(</span><span class="nx">options</span><span class="p">:</span> <span class="nx">RetryRouterOptions</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="nx">Router</span>

<span class="kr">interface</span> <span class="nx">RetryRouterOptions</span> <span class="p">{</span> 
  <span class="nl">period</span><span class="p">:</span> <span class="kr">number</span><span class="p">;</span> 
  <span class="nx">maxRetry</span><span class="p">?:</span> <span class="kr">number</span> 
<span class="p">}</span>
</code></pre>
<p>router is a tool for picking the best service base on given criteria.</p>

<ul>
<li>lookUp - The function that finds <a href="#endpoint">Endpoint</a> by given criteria.</li>
<li>message - metadata, contain criteria for picking the <a href="#endpoint">Endpoint</a></li>
</ul>
<h3 id='default'>default</h3>
<p>pick the first available item.</p>
<h3 id='roundrobin'>RoundRobin</h3>
<p>pick the next item from a list of available items.</p>
<h3 id='retryrouter'>retryRouter</h3>
<p>ping the registry every @ms and checking if there are any available items.
pick the first available item.</p>
<h2 id='service'>Service</h2><pre class="highlight typescript tab-typescript"><code><span class="kr">interface</span> <span class="nx">Service</span> <span class="p">{</span>
  <span class="nl">definition</span><span class="p">:</span> <span class="nx">ServiceDefinition</span><span class="p">;</span>
  <span class="nl">reference</span><span class="p">:</span> <span class="nx">ServiceReference</span><span class="p">;</span>
<span class="p">}</span>

<span class="kr">interface</span> <span class="nx">ServiceDefinition</span> <span class="p">{</span>
  <span class="nl">serviceName</span><span class="p">:</span> <span class="kr">string</span><span class="p">;</span>
  <span class="nl">methods</span><span class="p">:</span> <span class="p">{</span>
    <span class="p">[</span><span class="nx">methodName</span><span class="p">:</span> <span class="kr">string</span><span class="p">]:</span> <span class="p">{</span>
      <span class="nl">asyncModel</span><span class="p">:</span> <span class="nx">AsyncModel</span><span class="p">;</span>
    <span class="p">};</span>
  <span class="p">};</span>
<span class="p">}</span>

<span class="kd">type</span> <span class="nx">ServiceReference</span> <span class="o">=</span> <span class="nx">ServiceFactory</span> <span class="o">|</span> <span class="nx">ServiceObject</span><span class="p">;</span>

<span class="kd">type</span> <span class="nx">ServiceFactory</span> <span class="o">=</span> <span class="p">({</span> <span class="nx">createProxy</span><span class="p">,</span> <span class="nx">createServiceCall</span> <span class="p">}:</span> <span class="nx">ServiceFactoryOptions</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="nx">ServiceObject</span><span class="p">;</span>

<span class="kr">interface</span> <span class="nx">ServiceObject</span> <span class="p">{</span>
  <span class="kd">constructor</span><span class="p">?:</span> <span class="kr">any</span><span class="p">;</span>

  <span class="p">[</span><span class="nx">methodName</span><span class="p">:</span> <span class="kr">string</span><span class="p">]:</span> <span class="kr">any</span><span class="p">;</span>
<span class="p">}</span>

<span class="kr">interface</span> <span class="nx">ServiceFactoryOptions</span> <span class="p">{</span>
  <span class="nl">createProxy</span><span class="p">:</span> <span class="nx">CreateProxy</span><span class="p">;</span>
  <span class="nl">createServiceCall</span><span class="p">:</span> <span class="nx">CreateServiceCall</span><span class="p">;</span>
<span class="p">}</span>
</code></pre>
<p>Service is combination of definition and the reference that uphold the contract.  </p>

<ul>
<li>definition - metadata that define the service.</li>
<li>reference - code of the service</li>
</ul>
<h3 id='servicedefinition'>ServiceDefinition</h3>
<p>Its the metadata that describe the service.</p>

<ul>
<li>serviceName - The name of a service</li>
<li>methods - Map of methods that exist in the service.<br>
each method describe its <a href="#asyncmodel">asyncModel</a>.</li>
</ul>
<h3 id='servicereference'>ServiceReference</h3>
<p>Its the code of the service.</p>

<ul>
<li>ServiceFactory - callback that provide life-cycle/inject hook in the bootstrap process.</li>
<li>ServiceObject - object that contains the functionality described in the serviceDefinition.</li>
</ul>
<h2 id='transport'>Transport</h2><pre class="highlight typescript tab-typescript"><code><span class="kr">interface</span> <span class="nx">Transport</span> <span class="p">{</span>
  <span class="nl">clientTransport</span><span class="p">:</span> <span class="nx">ClientTransport</span><span class="p">;</span>
  <span class="nl">serverTransport</span><span class="p">:</span> <span class="nx">ServerTransport</span><span class="p">;</span>
<span class="p">}</span>

<span class="kr">interface</span> <span class="nx">ClientTransport</span> <span class="p">{</span>
   <span class="nl">start</span><span class="p">:</span> <span class="p">(</span><span class="nx">options</span><span class="p">:</span> <span class="nx">ClientTransportOptions</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="nb">Promise</span><span class="o">&lt;</span><span class="nx">RequestHandler</span><span class="o">&gt;</span><span class="p">;</span>
   <span class="nl">destroy</span><span class="p">:</span> <span class="nx">TDestroy</span><span class="p">;</span>
<span class="p">}</span>

<span class="kd">type</span> <span class="nx">ServerTransport</span> <span class="o">=</span> <span class="p">(</span><span class="nx">options</span><span class="p">:</span> <span class="nx">ServerTransportOptions</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="nx">ServerStop</span><span class="p">;</span>

<span class="kr">interface</span> <span class="nx">ClientTransportOptions</span> <span class="p">{</span>
  <span class="nl">remoteAddress</span><span class="p">:</span> <span class="nx">Address</span><span class="p">;</span>
  <span class="nl">logger</span><span class="p">:</span> <span class="nx">TLogger</span><span class="p">;</span>
<span class="p">}</span>

<span class="kr">interface</span> <span class="nx">ServerTransportOptions</span> <span class="p">{</span>
  <span class="nl">localAddress</span><span class="p">:</span> <span class="nx">Address</span><span class="p">;</span>
  <span class="nl">serviceCall</span><span class="p">:</span> <span class="nx">RequestHandler</span><span class="p">;</span>
  <span class="nl">logger</span><span class="p">:</span> <span class="nx">TLogger</span><span class="p">;</span>
<span class="p">}</span>

<span class="kr">interface</span> <span class="nx">RequestHandler</span> <span class="p">{</span>
  <span class="nl">requestResponse</span><span class="p">:</span> <span class="p">(</span><span class="nx">message</span><span class="p">:</span> <span class="nx">Message</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="nb">Promise</span><span class="o">&lt;</span><span class="kr">any</span><span class="o">&gt;</span><span class="p">;</span>
  <span class="nl">requestStream</span><span class="p">:</span> <span class="p">(</span><span class="nx">message</span><span class="p">:</span> <span class="nx">Message</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="nx">Observable</span><span class="o">&lt;</span><span class="kr">any</span><span class="o">&gt;</span><span class="p">;</span>
<span class="p">}</span>

<span class="kd">type</span> <span class="nx">ServerStop</span> <span class="o">=</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="k">void</span><span class="p">;</span>
<span class="kd">type</span> <span class="nx">TLogger</span> <span class="o">=</span> <span class="p">(</span><span class="nx">msg</span><span class="p">:</span> <span class="kr">any</span><span class="p">,</span> <span class="kd">type</span><span class="p">:</span> <span class="s1">'warn'</span> <span class="o">|</span> <span class="s1">'log'</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="k">void</span><span class="p">;</span>
<span class="kd">type</span> <span class="nx">TDestroy</span> <span class="o">=</span> <span class="p">({</span> <span class="nx">logger</span> <span class="p">}:</span> <span class="nx">TDestroyOptions</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="k">void</span><span class="p">;</span>

<span class="kr">interface</span> <span class="nx">TDestroyOptions</span> <span class="p">{</span>
  <span class="nl">address</span><span class="p">:</span> <span class="kr">string</span><span class="p">;</span>
  <span class="nl">logger</span><span class="p">:</span> <span class="nx">TLogger</span><span class="p">;</span>
<span class="p">}</span>
</code></pre>
<p>Opinionated communication layer.<br>
It is used when requesting a service from another microservice instance.</p>

<p>When bootstrapping microservice, it is possible to pass transport in the <a href="#microservice">options</a>.</p>

<p>transport is your custom implementation to <a href="https://github.com/rsocket/rsocket-js">RSocket</a> Transport Providers.</p>

<ul>
<li>clientProvider - implementation for the client side.</li>
<li>start - open connection to remote container and resolve with RequestHandler to call the remote container</li>
<li><p>destroy - remove all open connections of the container</p></li>
<li><p>serverProvider - implementation for the server side.</p></li>
<li><p>ServerStop - remove all open connections of this container</p></li>
</ul>
