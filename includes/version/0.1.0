<h1 id='bootstrap'>bootstrap</h1>
<p>bootstrap the microservice can be done in 3 steps:</p>
<h2 id='1-define-the-service'>1. define the service</h2><pre class="highlight typescript tab-typescript"><code><span class="kr">interface</span> <span class="nx">ServiceDefinition</span> <span class="p">{</span>
  <span class="nl">serviceName</span><span class="p">:</span> <span class="kr">string</span><span class="p">;</span>
  <span class="nl">methods</span><span class="p">:</span> <span class="p">{</span>
    <span class="p">[</span><span class="nx">methodName</span><span class="p">:</span> <span class="kr">string</span><span class="p">]:</span> <span class="p">{</span>
      <span class="nl">asyncModel</span><span class="p">:</span> <span class="nx">AsyncModel</span><span class="p">;</span>
    <span class="p">};</span>
  <span class="p">};</span>
<span class="p">}</span>
</code></pre><pre class="highlight javascript tab-javascript"><code><span class="kr">import</span> <span class="p">{</span> <span class="nx">ASYNC_MODEL_TYPES</span> <span class="p">}</span> <span class="nx">from</span> <span class="s1">'@scalecube/scalecube-microservice'</span><span class="p">;</span>

<span class="kr">const</span> <span class="nx">serviceDefinition</span> <span class="o">=</span> <span class="p">{</span>
  <span class="na">serviceName</span><span class="p">:</span> <span class="s1">'Service'</span><span class="p">,</span>
  <span class="na">methods</span><span class="p">:{</span>
  <span class="na">someMethod</span> <span class="p">:</span> <span class="p">{</span>
    <span class="na">asyncModel</span> <span class="p">:</span> <span class="nx">ASYNC_MODEL_TYPES</span><span class="p">.</span><span class="nx">RequestResponse</span>
    <span class="p">}</span>
  <span class="p">}</span> 
<span class="p">}</span>
</code></pre>
<p>service definition is the contract between the provider to the consumer of the service.<br>
in other words, it is the contract that the service must uphold.</p>

<p>it is possible that the service will contain more functionality then what you define in the contract,<br>
but only the functions that are in the definition will be accessible via scalecube.</p>

<ul>
<li>serviceName - The name of a service</li>
<li>methods - Map of methods that exist in the service.<br>
each method describe its <a href="#asyncmodel">asyncModel</a>.</li>
</ul>
<h2 id='2-create-the-servicereference'>2. create the serviceReference</h2><pre class="highlight javascript tab-javascript"><code><span class="c1">// class example</span>
<span class="kr">class</span> <span class="nx">Service</span> <span class="p">{</span>
  <span class="nx">constructor</span><span class="p">(){</span>

  <span class="p">}</span>

  <span class="nx">someMethod</span><span class="p">(){</span>
    <span class="k">return</span> <span class="nx">Promise</span><span class="p">.</span><span class="nx">resolve</span><span class="p">(</span><span class="s1">'some method been resolved'</span><span class="p">);</span>
  <span class="p">}</span>
<span class="p">}</span>
<span class="c1">// module example</span>
<span class="kr">const</span> <span class="nx">someMethod</span> <span class="o">=</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="nx">Promise</span><span class="p">.</span><span class="nx">resolve</span><span class="p">(</span><span class="s1">'some method been resolved'</span><span class="p">);</span>

</code></pre><pre class="highlight typescript tab-typescript"><code><span class="kd">type</span> <span class="nx">ServiceReference</span> <span class="o">=</span> <span class="nx">ServiceFactory</span> <span class="o">|</span> <span class="nx">ServiceObject</span><span class="p">;</span>

<span class="kd">type</span> <span class="nx">ServiceFactory</span> <span class="o">=</span> <span class="p">({</span> <span class="nx">createProxy</span><span class="p">,</span> <span class="nx">createServiceCall</span> <span class="p">}:</span> <span class="nx">ServiceFactoryOptions</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="nx">ServiceObject</span><span class="p">;</span>

<span class="kr">interface</span> <span class="nx">ServiceObject</span> <span class="p">{</span>
  <span class="kd">constructor</span><span class="p">?:</span> <span class="kr">any</span><span class="p">;</span>

  <span class="p">[</span><span class="nx">methodName</span><span class="p">:</span> <span class="kr">string</span><span class="p">]:</span> <span class="kr">any</span><span class="p">;</span>
<span class="p">}</span>

<span class="kr">interface</span> <span class="nx">ServiceFactoryOptions</span> <span class="p">{</span>
  <span class="nl">createProxy</span><span class="p">:</span> <span class="nx">CreateProxy</span><span class="p">;</span>
  <span class="nl">createServiceCall</span><span class="p">:</span> <span class="nx">CreateServiceCall</span><span class="p">;</span>
<span class="p">}</span>
</code></pre>
<p>ServiceReference can be a class instance, module or a callback function.</p>

<p>passing callback function in the ServiceReference call <a href="#dependency-hook">depedency hook</a> 
and it can be used to inject proxy/service call to the service.</p>
<h2 id='3-creating-microservice'>3. creating microservice</h2><pre class="highlight javascript tab-javascript"><code><span class="kr">import</span> <span class="p">{</span> <span class="nx">createMicroservice</span> <span class="p">}</span> <span class="nx">from</span> <span class="s1">'@scalecube/scalecube-microservice'</span><span class="p">;</span>

<span class="kr">const</span> <span class="nx">ms</span> <span class="o">=</span> <span class="nx">createMicroservice</span><span class="p">({</span>
             <span class="na">services</span> <span class="p">:</span> <span class="p">[{</span>
               <span class="na">reference</span> <span class="p">:</span> <span class="p">{</span><span class="nx">someMethod</span><span class="p">},</span>
               <span class="na">definition</span><span class="p">:</span> <span class="nx">serviceDefinition</span>
             <span class="p">},</span>
             <span class="p">{</span>
                <span class="na">reference</span> <span class="p">:</span> <span class="k">new</span> <span class="nx">Service</span><span class="p">(),</span>
                <span class="na">definition</span><span class="p">:</span> <span class="nx">serviceDefinition</span>
              <span class="p">}]</span>
           <span class="p">});</span>
</code></pre><pre class="highlight typescript tab-typescript"><code><span class="kd">type</span> <span class="nx">CreateMicroservice</span> <span class="o">=</span> <span class="p">(</span><span class="nx">options</span><span class="p">:</span> <span class="nx">MicroserviceOptions</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="nx">Microservice</span><span class="p">;</span>

<span class="kr">interface</span> <span class="nx">MicroserviceOptions</span> <span class="p">{</span>
  <span class="nx">services</span><span class="p">?:</span> <span class="nx">Service</span><span class="p">[];</span>
  <span class="nx">seedAddress</span><span class="p">?:</span> <span class="nx">Address</span> <span class="o">|</span> <span class="kr">string</span><span class="p">;</span>
  <span class="nx">address</span><span class="p">?:</span> <span class="nx">Address</span> <span class="o">|</span> <span class="kr">string</span><span class="p">;</span>
  <span class="nx">transport</span><span class="p">?:</span> <span class="nx">Transport</span><span class="p">;</span>
  <span class="nx">cluster</span><span class="p">?:</span> <span class="p">(</span><span class="nx">opt</span><span class="p">:</span> <span class="nx">ClusterOptions</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="nx">Cluster</span><span class="p">;</span>
  <span class="nx">debug</span><span class="p">?:</span> <span class="kr">boolean</span><span class="p">;</span>
 <span class="p">}</span>

<span class="kr">interface</span> <span class="nx">Service</span> <span class="p">{</span>
  <span class="nl">definition</span><span class="p">:</span> <span class="nx">ServiceDefinition</span><span class="p">;</span>
  <span class="nl">reference</span><span class="p">:</span> <span class="nx">ServiceReference</span><span class="p">;</span>
<span class="p">}</span>
</code></pre>
<p>After creating a service and a service-definition we can now bootstrap our microservice.   </p>

<ul>
<li>services - An array of services, that will exist inside a microservice container.</li>
<li>seedAddress - <a href="#seedaddress">seedAddress</a> is the entry point to our distributed env.</li>
<li>address - An <a href="#address">address</a> for this microservice instance.</li>
<li>transport - optional pluggable <a href="#transport">transport</a>.</li>
<li>cluster - optional pluggable <a href="#cluster">cluster</a>.</li>
<li>debug - optional logs.</li>
</ul>
<h1 id='basic-usage'>Basic usage</h1>
<p>After bootstrapping the microservice, we can use it to request services from the <a href="#distributed-environment">distributed environment</a></p>
<h2 id='createproxy'>createProxy</h2><pre class="highlight typescript tab-typescript"><code><span class="kd">type</span> <span class="nx">CreateProxy</span> <span class="o">=</span> <span class="o">&lt;</span><span class="nx">T</span> <span class="o">=</span> <span class="kr">any</span><span class="o">&gt;</span><span class="p">(</span><span class="nx">options</span><span class="p">:</span> <span class="nx">ProxyOptions</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="nx">T</span><span class="p">;</span>

<span class="kr">interface</span> <span class="nx">ProxyOptions</span> <span class="p">{</span>
  <span class="nx">router</span><span class="p">?:</span> <span class="nx">Router</span><span class="p">;</span>
  <span class="nl">serviceDefinition</span><span class="p">:</span> <span class="nx">ServiceDefinition</span><span class="p">;</span>
<span class="p">}</span>

</code></pre><pre class="highlight javascript tab-javascript"><code><span class="kr">const</span> <span class="nx">serviceProxy</span> <span class="o">=</span> <span class="nx">ms</span><span class="p">.</span><span class="nx">createProxy</span><span class="p">({</span><span class="nx">serviceDefinition</span><span class="p">});</span>
<span class="nx">serviceProxy</span><span class="p">.</span><span class="nx">someMethod</span><span class="p">().</span><span class="nx">then</span><span class="p">(</span><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">)</span> <span class="c1">// resolve with `someMethod` response</span>
</code></pre>
<p>It is possible to createProxy from the microservice instance we have just created. </p>

<p>This is a proxy to a different service that is shared in the <a href="#distributed-environment">distributed environment</a>.</p>

<ul>
<li>router - Custom router specifies the logic of choosing the appropriate remoteService.</li>
<li>serviceDefinition - The metadata for a service container, that includes the name of a service and the map of methods that are included in it.</li>
</ul>
<h2 id='createservicecall'>createServiceCall</h2><pre class="highlight typescript tab-typescript"><code><span class="kd">type</span> <span class="nx">CreateServiceCall</span> <span class="o">=</span> <span class="p">(</span><span class="nx">options</span><span class="p">:</span> <span class="nx">CreateServiceCallOptions</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="nx">ServiceCall</span><span class="p">;</span>

<span class="kr">interface</span> <span class="nx">CreateServiceCallOptions</span> <span class="p">{</span>
  <span class="nx">router</span><span class="p">?:</span> <span class="nx">Router</span><span class="p">;</span>
<span class="p">}</span>

<span class="kr">interface</span> <span class="nx">ServiceCall</span> <span class="p">{</span>
  <span class="nl">requestStream</span><span class="p">:</span> <span class="p">(</span><span class="nx">message</span><span class="p">:</span> <span class="nx">Message</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="nx">Observable</span><span class="o">&lt;</span><span class="nx">Message</span><span class="o">&gt;</span><span class="p">;</span>
  <span class="nl">requestResponse</span><span class="p">:</span> <span class="p">(</span><span class="nx">message</span><span class="p">:</span> <span class="nx">Message</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="nb">Promise</span><span class="o">&lt;</span><span class="nx">Message</span><span class="o">&gt;</span><span class="p">;</span>
<span class="p">}</span>
</code></pre><pre class="highlight javascript tab-javascript"><code><span class="kr">const</span> <span class="nx">message</span> <span class="o">=</span> <span class="p">{</span>
  <span class="na">qualifier</span><span class="p">:</span> <span class="s1">'Service/someMethod'</span><span class="p">,</span>
  <span class="na">data</span><span class="p">:</span> <span class="p">[</span><span class="s1">'value'</span><span class="p">]</span>
<span class="p">};</span>

<span class="nx">ms</span><span class="p">.</span><span class="nx">createServiceCall</span><span class="p">().</span><span class="nx">requestResponse</span><span class="p">(</span><span class="nx">message</span><span class="p">).</span><span class="nx">then</span><span class="p">(</span><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">);</span>
<span class="nx">ms</span><span class="p">.</span><span class="nx">createServiceCall</span><span class="p">().</span><span class="nx">requestStream</span><span class="p">(</span><span class="nx">message</span><span class="p">).</span><span class="nx">subscribe</span><span class="p">(</span><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">);</span>

</code></pre>
<p>serviceCall is another way to request a service.<br>
it is more low level approach and the user must define the <a href="#message"><code>message</code></a> properly in-order for it to work.</p>

<p>good example for preferring serviceCall over Proxy is in the <a href="#"><code>Gateway</code></a>,<br>
in the Gateway we want to receive a request from outside of our <a href="#distributed-environment">distributed environment</a> and then pass the request to the correct service inside ot it.</p>

<ul>
<li>router - Custom router specifies the logic of choosing the appropriate remoteService</li>
<li>requestStream - A method using which a consumer requires a stream and receives an Observable sequence describing updates of the method and qualifier that was used for the invocation</li>
<li>requestResponse - A method using which a consumer requires data and a provider responds with the data once in the form of promise,<br>
that includes the response from the method and qualifier that was used for the invocation.</li>
</ul>
<h2 id='createproxies'>createProxies</h2><pre class="highlight typescript tab-typescript"><code>
<span class="kd">type</span> <span class="nx">CreateProxies</span> <span class="o">=</span> <span class="p">(</span><span class="nx">options</span><span class="p">:</span> <span class="nx">CreateProxiesOptions</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="nx">ProxiesMap</span><span class="p">;</span>

<span class="kr">interface</span> <span class="nx">CreateProxiesOptions</span> <span class="p">{</span>
  <span class="nl">proxies</span><span class="p">:</span> <span class="nx">ProxiesOptions</span><span class="p">[];</span>
  <span class="nx">router</span><span class="p">?:</span> <span class="nx">Router</span><span class="p">;</span>
  <span class="nx">isAsync</span><span class="p">?:</span> <span class="kr">boolean</span><span class="p">;</span>
<span class="p">}</span>

<span class="kr">interface</span> <span class="nx">ProxiesOptions</span> <span class="p">{</span>
  <span class="nl">proxyName</span><span class="p">:</span> <span class="kr">string</span><span class="p">;</span>
  <span class="nl">serviceDefinition</span><span class="p">:</span> <span class="nx">ServiceDefinition</span><span class="p">;</span>
<span class="p">}</span>

<span class="kr">interface</span> <span class="nx">ProxiesMap</span> <span class="p">{</span>
  <span class="p">[</span><span class="nx">proxyName</span><span class="p">:</span> <span class="kr">string</span><span class="p">]:</span> <span class="nb">Promise</span><span class="o">&lt;</span><span class="p">{</span> <span class="na">proxy</span><span class="p">:</span> <span class="nx">Proxy</span> <span class="p">}</span><span class="o">&gt;</span> <span class="o">|</span> <span class="nx">Proxy</span><span class="p">;</span>
<span class="p">}</span>

<span class="kd">type</span> <span class="nx">Proxy</span><span class="o">&lt;</span><span class="nx">T</span> <span class="o">=</span> <span class="kr">any</span><span class="o">&gt;</span> <span class="o">=</span> <span class="nx">T</span><span class="p">;</span>
</code></pre><pre class="highlight javascript tab-javascript"><code><span class="kr">const</span> <span class="p">{</span> <span class="nx">awaitServiceProxy</span> <span class="p">}</span> <span class="o">=</span> <span class="nx">ms</span><span class="p">.</span><span class="nx">createProxies</span><span class="p">({</span>
  <span class="na">proxies</span><span class="p">:</span> <span class="p">[{</span>
    <span class="nx">serviceDefinition</span><span class="p">,</span>
    <span class="na">proxyName</span><span class="p">:</span> <span class="s1">'awaitServiceProxy'</span>
  <span class="p">}],</span>
  <span class="na">isAsync</span> <span class="p">:</span> <span class="kc">true</span>
<span class="p">});</span>

<span class="nx">awaitServiceProxy</span><span class="p">.</span><span class="nx">then</span><span class="p">(({</span><span class="na">proxy</span><span class="p">:</span> <span class="nx">serviceProxy</span><span class="p">})</span> <span class="o">=&gt;</span> <span class="p">{</span>
  <span class="nx">serviceProxy</span><span class="p">.</span><span class="nx">someMethod</span><span class="p">().</span><span class="nx">then</span><span class="p">(</span><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">);</span>
<span class="p">});</span>
</code></pre>
<p>createProxies is an advance way of creating a proxy to a service.
it provide a way to receive multiple proxies in one command.<br>
also, it provide two option of resolving the proxies:</p>

<ol>
<li><p>if setting the <code>isAsync</code> to <code>true</code> then you will receive 
an object with Promises to the proxies.</p></li>
<li><p>if setting the <code>isAsync</code> to <code>false</code> then you will receive 
an object with the proxies.</p></li>
</ol>

<p>promise to the proxy will resolve only when the service already in the registry.
this help you avoid retry logic till the service is available to use.</p>

<ul>
<li>proxies - List of ProxiesOptions, contain the configuration for creating the proxy</li>
<li>router - optional router to provide extra logic (remoteCall).</li>
<li>isAsync - optional flag to resolve the proxy asynchronous way<br>
if true then the proxy will be resolved when the service is in the registry.<br>
if false then the proxy will be resolved immediately.</li>
<li>proxyName - name of the proxy (used as the key in the map).</li>
<li>serviceDefinition - metadata of the service.</li>
<li>ProxiesMap - Map of generic proxyName and a Promise to the proxy.</li>
</ul>
<h2 id='destroy'>destroy</h2><pre class="highlight typescript tab-typescript"><code><span class="kr">interface</span> <span class="nx">Microservice</span> <span class="p">{</span>
  <span class="nl">destroy</span><span class="p">:</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="nb">Promise</span><span class="o">&lt;</span><span class="kr">any</span><span class="o">&gt;</span><span class="p">;</span>
<span class="p">}</span>
</code></pre><pre class="highlight javascript tab-javascript"><code><span class="nx">ms</span><span class="p">.</span><span class="nx">destroy</span><span class="p">().</span><span class="nx">then</span><span class="p">(</span><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">);</span>
</code></pre>
<p>destroy the microservice instance.</p>

<ol>
<li>stop listen to the <a href="#address">address</a>.<br></li>
<li>notify in the <a href="#distributed-environment">distributed environment</a> that the services from this microservice are not available anymore.<br></li>
<li>remove it self from the <a href="#distributed-environment">distributed environment</a>.<br></li>
</ol>

<ul>
<li>destroy - The method is used to delete a microservice and close all the subscriptions related with it.</li>
</ul>
<h1 id='advance-usage'>Advance usage</h1><h2 id='remotecall'>remoteCall</h2><pre class="highlight javascript tab-javascript"><code><span class="nx">createMicroservice</span><span class="p">({</span>
  <span class="na">services</span><span class="p">:</span> <span class="p">[{</span>
    <span class="na">definition</span><span class="p">:</span> <span class="nx">serviceDefinition</span><span class="p">,</span>
    <span class="na">reference</span> <span class="p">:</span> <span class="k">new</span> <span class="nx">Service</span><span class="p">()</span>
  <span class="p">}],</span>
  <span class="na">address</span><span class="p">:</span> <span class="s1">'A'</span>
<span class="p">});</span>

<span class="kr">const</span> <span class="nx">localMs</span> <span class="o">=</span> <span class="nx">createMicroservice</span><span class="p">({</span>
  <span class="na">seedAddress</span><span class="p">:</span> <span class="s1">'A'</span>
<span class="p">});</span>

<span class="kr">const</span> <span class="nx">proxyA</span> <span class="o">=</span> <span class="nx">localMs</span><span class="p">.</span><span class="nx">createProxy</span><span class="p">({</span><span class="nx">serviceDefinition</span><span class="p">});</span>

<span class="nx">proxyA</span><span class="p">.</span><span class="nx">someMethod</span><span class="p">().</span><span class="nx">then</span><span class="p">(</span><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">);</span>
</code></pre>
<p>remoteCall is a request for a service that located in different microservice container in our <a href="#distributed-environment">distributed environment</a></p>
<h2 id='dependency-hook'>dependency hook</h2><pre class="highlight typescript tab-typescript"><code><span class="kd">type</span> <span class="nx">ServiceFactory</span> <span class="o">=</span> <span class="p">({</span> <span class="nx">createProxy</span><span class="p">,</span> <span class="nx">createServiceCall</span> <span class="p">}:</span> <span class="nx">ServiceFactoryOptions</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="nx">ServiceObject</span><span class="p">;</span>

<span class="kr">interface</span> <span class="nx">ServiceFactoryOptions</span> <span class="p">{</span>
  <span class="nl">createProxy</span><span class="p">:</span> <span class="nx">CreateProxy</span><span class="p">;</span>
  <span class="nl">createServiceCall</span><span class="p">:</span> <span class="nx">CreateServiceCall</span><span class="p">;</span>
<span class="p">}</span>

<span class="kr">interface</span> <span class="nx">ServiceObject</span> <span class="p">{</span>
  <span class="kd">constructor</span><span class="p">?:</span> <span class="kr">any</span><span class="p">;</span>

  <span class="p">[</span><span class="nx">methodName</span><span class="p">:</span> <span class="kr">string</span><span class="p">]:</span> <span class="kr">any</span><span class="p">;</span>
<span class="p">}</span>
</code></pre><pre class="highlight javascript tab-javascript"><code><span class="kr">import</span> <span class="p">{</span> <span class="nx">createMicroservice</span><span class="p">,</span> <span class="nx">ASYNC_MODEL_TYPES</span> <span class="p">}</span> <span class="nx">from</span> <span class="s1">'@scalecube/scalecube@scalecube/scalecube-microservice'</span><span class="p">;</span>
  <span class="kr">const</span> <span class="nx">definitionA</span> <span class="o">=</span> <span class="p">{</span>
    <span class="na">serviceName</span><span class="p">:</span> <span class="s1">'serviceA'</span><span class="p">,</span>
    <span class="na">methods</span><span class="p">:</span> <span class="p">{</span>
      <span class="na">someMethodA</span><span class="p">:</span> <span class="p">{</span>
        <span class="na">asyncModel</span><span class="p">:</span> <span class="nx">ASYNC_MODEL_TYPES</span><span class="p">.</span><span class="nx">REQUEST_RESPONSE</span><span class="p">,</span>
      <span class="p">},</span>
    <span class="p">},</span>
  <span class="p">};</span>

  <span class="kr">const</span> <span class="nx">definitionB</span> <span class="o">=</span> <span class="p">{</span>
    <span class="na">serviceName</span><span class="p">:</span> <span class="s1">'serviceB'</span><span class="p">,</span>
    <span class="na">methods</span><span class="p">:</span> <span class="p">{</span>
      <span class="na">someMethodB</span><span class="p">:</span> <span class="p">{</span>
        <span class="na">asyncModel</span><span class="p">:</span> <span class="nx">ASYNC_MODEL_TYPES</span><span class="p">.</span><span class="nx">REQUEST_RESPONSE</span><span class="p">,</span>
      <span class="p">},</span>
    <span class="p">},</span>
  <span class="p">};</span>

  <span class="kr">class</span> <span class="nx">ServiceB</span> <span class="p">{</span>
    <span class="nx">constructor</span><span class="p">(</span><span class="nx">proxyA</span><span class="p">)</span> <span class="p">{</span>
      <span class="c1">// work with proxy to serviceA</span>
      <span class="nx">proxyA</span><span class="p">.</span><span class="nx">someMethodA</span><span class="p">().</span><span class="nx">then</span><span class="p">(</span><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">);</span>
    <span class="p">}</span>
  <span class="p">}</span>

<span class="nx">createMicroservice</span><span class="p">({</span>
  <span class="na">services</span><span class="p">:</span> <span class="p">[</span>
    <span class="p">{</span>
      <span class="na">definition</span><span class="p">:</span> <span class="nx">definitionA</span><span class="p">,</span>
      <span class="na">reference</span> <span class="p">:</span> <span class="p">{</span> <span class="nx">someMethodA</span><span class="p">}</span>
    <span class="p">},</span>
    <span class="p">{</span>
      <span class="na">definition</span><span class="p">:</span> <span class="nx">definitionB</span><span class="p">,</span>
      <span class="na">reference</span><span class="p">:</span> <span class="p">({</span> <span class="nx">createProxy</span><span class="p">,</span> <span class="nx">createServiceCall</span> <span class="p">})</span> <span class="o">=&gt;</span> <span class="p">{</span>
        <span class="kr">const</span> <span class="nx">proxyA</span> <span class="o">=</span> <span class="nx">createProxy</span><span class="p">({</span><span class="na">serviceDefinition</span><span class="p">:</span> <span class="nx">definitionA</span> <span class="p">});</span>

        <span class="k">return</span> <span class="k">new</span> <span class="nx">ServiceB</span><span class="p">(</span><span class="nx">proxyA</span><span class="p">);</span>
      <span class="p">}</span>
    <span class="p">}</span>    
  <span class="p">]</span>
<span class="p">})</span>
</code></pre>
<p>dependency hook is used if your service deepened on another service,<br>
or if you want to add life cycle to your bootstrap process.</p>
<h2 id='gateway'>gateway</h2><h1 id='errors'>Errors</h1>
<table><thead>
<tr>
<th>Error Code</th>
<th>Message</th>
<th>Possible solution</th>
</tr>
</thead><tbody>
<tr>
<td>MS0000</td>
<td>microservice does not exists</td>
<td>microservice instance have been destroyed</td>
</tr>
<tr>
<td>MS0001</td>
<td><a href="#message">Message</a> has not been provided</td>
<td>calling requestResponse or requestStream must contain a Message</td>
</tr>
<tr>
<td>MS0002</td>
<td><a href="#message">Message</a> data has not been provided</td>
<td>Message must contain data property</td>
</tr>
<tr>
<td>MS0003</td>
<td><a href="#message">Message</a> qualifier has not been provided</td>
<td>Message must contain qualifier property</td>
</tr>
<tr>
<td>MS0004</td>
<td><a href="#message">Message</a> should not to be empty object</td>
<td>can not pass empty object as Message</td>
</tr>
<tr>
<td>MS0005</td>
<td><a href="#qualifier">qualifier</a> expected to be service/method format</td>
<td>qualifier is not a string divided by &#39;/&#39;</td>
</tr>
<tr>
<td>MS0006</td>
<td><a href="#service">Service</a> missing definition</td>
<td>when <a href="#bootstrap">bootstrap microservice</a> you provide service without a contract</td>
</tr>
<tr>
<td>MS0007</td>
<td><a href="#message">Message</a> format error: data must be Array</td>
<td>Message data property must be array, <a href="#passing-array-serviceall">how can i pass array in message</a></td>
</tr>
<tr>
<td>MS0008</td>
<td>Not valid format, <a href="#3-creating-microservice">services</a> must be Array</td>
<td>when <a href="#bootstrap">bootstrap microservice</a>, services must be array of service</td>
</tr>
<tr>
<td>MS0009</td>
<td>Not valid format, <a href="#service">service</a> must be Object</td>
<td>service must be an object</td>
</tr>
<tr>
<td>MS0010</td>
<td>Not valid format, <a href="#microservice">Microservice configuration</a> must be an Object</td>
<td>missing configuration when bootstrapping a microservice instance</td>
</tr>
<tr>
<td>MS0011</td>
<td><a href="#qualifier">qualifier</a> should not be empty string</td>
<td>qualifier must be valid string in the format &#39;part1/part2&#39;</td>
</tr>
<tr>
<td>MS0012</td>
<td>Invalid <a href="##createproxies">createProxies</a> configuration, proxyName must be unique</td>
<td>when createProxies you are passing the same proxyName twice</td>
</tr>
<tr>
<td>MS0013</td>
<td>Transport provider is not define</td>
<td>when running on nodejs, <a href="#transport">Transport</a> must be provided</td>
</tr>
<tr>
<td>MS0014</td>
<td>service method <methodName> missing in the <a href="#1-define-the-service">serviceDefinition</a></td>
<td>try to call a method from a proxy that does not in the definition</td>
</tr>
<tr>
<td>MS0015</td>
<td>can&#39;t find services that match the give criteria: &lt;<a href="#qualifier">qualifier</a>&gt;</td>
<td>requesting a service that is not in the <a href="#registry">registry</a></td>
</tr>
<tr>
<td>MS0016</td>
<td>&lt;<a href="#asyncmodel">asyncModel</a> does not match, expect asyncModel in the proxy definition&gt;, but received <asyncModel in the endpoint definition></td>
<td>asyncModel in the request does not match the asyncModel define in the registry for the service</td>
</tr>
<tr>
<td>MS0017</td>
<td>service (&lt;<a href="#qualifier">qualifier</a>&gt;) has valid definition but reference is not a function.</td>
<td><a href="#2-create-the-servicereference">ServiceObject</a> method is not a function</td>
</tr>
<tr>
<td>MS0018</td>
<td>service does not uphold the contract, <serviceName> is not provided</td>
<td>definition has a method that is not provided in the reference</td>
</tr>
<tr>
<td>MS0019</td>
<td>Not valid format, <serviceName> reference must be an Object</td>
<td><a href="#2-create-the-servicereference">ServiceReference</a> must return object</td>
</tr>
<tr>
<td>MS0020</td>
<td>Invalid format, definition must contain valid serviceName</td>
<td>serviceDefinition must contain property <code>serviceName</code></td>
</tr>
<tr>
<td>MS0021</td>
<td>Invalid format, definition must contain valid methods of type object</td>
<td>methods must be of type object</td>
</tr>
<tr>
<td>MS0022</td>
<td>Invalid format, definition must contain valid methods</td>
<td>methods must be none empty object</td>
</tr>
<tr>
<td>MS0023</td>
<td>Invalid format, serviceName must be not empty string but received type <typeof serviceName></td>
<td>fix the serviceDefinition, serviceName must be a string</td>
</tr>
</tbody></table>
<h1 id='faq'>FAQ</h1><h2 id='how-can-i-pass-array-in-message'>How can I pass array in message?</h2><pre class="highlight javascript tab-javascript"><code>
<span class="kr">const</span> <span class="nx">arrayToPassInArgs</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span><span class="mi">4</span><span class="p">];</span>
<span class="kr">const</span> <span class="nx">valueToPassInArgs</span> <span class="o">=</span> <span class="mi">5</span><span class="p">;</span>
<span class="kr">const</span> <span class="nx">objectToPassInArgs</span> <span class="o">=</span> <span class="p">{</span><span class="s1">'6'</span><span class="p">:</span><span class="mi">6</span><span class="p">};</span>

<span class="kr">const</span> <span class="nx">message</span> <span class="o">=</span> <span class="p">{</span>
  <span class="na">qualifier</span> <span class="p">:</span> <span class="s1">'Service/someMethod'</span><span class="p">,</span>
  <span class="na">data</span><span class="p">:</span> <span class="p">[</span><span class="nx">arrayToPassInArgs</span><span class="p">,</span> <span class="nx">valueToPassInArgs</span><span class="p">,</span> <span class="nx">objectToPassInArgs</span><span class="p">]</span>
<span class="p">}</span>

</code></pre>
<p>It is possbile to pass any data structure in the message.<br>
just need to make sure it wrap in array.</p>

<p>please look at the <a href="?javascript#passing-array-argument-in-message">example</a></p>
