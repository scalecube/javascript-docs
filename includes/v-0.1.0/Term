<h1 id='terminology'>Terminology</h1><h2 id='discovery'>Discovery</h2><pre class="highlight typescript tab-typescript"><code><span class="kd">type</span> <span class="nx">CreateDiscovery</span> <span class="o">=</span> <span class="p">(</span><span class="nx">options</span><span class="p">:</span> <span class="nx">DiscoveryOptions</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="nx">Discovery</span><span class="p">;</span>

<span class="kr">interface</span> <span class="nx">DiscoveryOptions</span> <span class="p">{</span>
  <span class="nl">address</span><span class="p">:</span> <span class="nx">Address</span><span class="p">;</span>
  <span class="nl">itemsToPublish</span><span class="p">:</span> <span class="nx">Item</span><span class="p">[];</span>
  <span class="nx">seedAddress</span><span class="p">?:</span> <span class="nx">Address</span><span class="p">;</span>
  <span class="nx">cluster</span><span class="p">?:</span> <span class="p">(</span><span class="nx">opt</span><span class="p">:</span> <span class="nx">ClusterOptions</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="nx">Cluster</span><span class="p">;</span>
  <span class="nx">debug</span><span class="p">?:</span> <span class="kr">boolean</span><span class="p">;</span>
<span class="p">}</span>

<span class="kr">interface</span> <span class="nx">Discovery</span> <span class="p">{</span>
  <span class="nx">discoveredItems$</span><span class="p">:</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="nx">Observable</span><span class="o">&lt;</span><span class="nx">ServiceDiscoveryEvent</span><span class="o">&gt;</span><span class="p">;</span>
  <span class="nx">destroy</span><span class="p">():</span> <span class="nb">Promise</span><span class="o">&lt;</span><span class="kr">string</span><span class="o">&gt;</span><span class="p">;</span>
<span class="p">}</span>

<span class="kd">type</span> <span class="nx">Item</span> <span class="o">=</span> <span class="kr">any</span><span class="p">;</span>
</code></pre>
<p>Discovery is a tool that connect the microservice instance to the <a href="#distributed-environment">distributed environment</a>.  </p>

<p>It convert events received from the <a href="#distributed-environment">distributed environment</a> to events that the registry can understand.</p>

<ul>
<li>address - A unique <a href="#address">address</a>.</li>
<li>itemsToPublish - The data that the discovery need to share.</li>
<li>seedAddress - the <a href="#address">address</a> we want to use in-order to connect to the distributed environment.</li>
<li>cluster - optional pluggable <a href="#cluster">cluster</a></li>
<li><p>debug - discovery logs</p></li>
<li><p>discoveredItems$ - An Observable sequence that describes all the items that published by <strong>other</strong> discoveries.<br>
Emits new array of all items each time new discovery is created or destroyed.</p></li>
<li><p>destroy - Destroy the discovery:  </p>

<ul>
<li>Completes discoveredItems$.<br></li>
<li>Notifies other discoveries that this discovery&#39;s items are not available anymore.<br></li>
<li>Resolves with the message, that specifies the <a href="#address">address</a> of the discovery.</li>
</ul></li>
</ul>
<h2 id='cluster'>Cluster</h2>
<p>create a <a href="#member">member</a> from the data it receive from the discovery,<br>
and use it in-order to share data in the distributed environment.</p>
<h2 id='transport'>Transport</h2>
<p>is the way scalecube send request/response from one microservice to another.</p>
<h2 id='router'>Router</h2><pre class="highlight javascript tab-javascript"><code><span class="kr">import</span> <span class="p">{</span> <span class="nx">roundRobin</span> <span class="p">}</span> <span class="nx">from</span> <span class="s1">'@scalecube/routers'</span><span class="p">;</span>

<span class="kr">const</span> <span class="nx">proxy</span> <span class="o">=</span> <span class="nx">ms</span><span class="p">.</span><span class="nx">createProxy</span><span class="p">({</span><span class="nx">serviceDefinition</span><span class="p">,</span> <span class="na">router</span><span class="p">:</span> <span class="nx">roundRobin</span><span class="p">})</span>
</code></pre><pre class="highlight typescript tab-typescript"><code>
<span class="kd">type</span> <span class="nx">Router</span> <span class="o">=</span> <span class="p">(</span><span class="nx">options</span><span class="p">:</span> <span class="nx">RouterOptions</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="nx">Endpoint</span> <span class="o">|</span> <span class="kc">null</span><span class="p">;</span>

<span class="kr">interface</span> <span class="nx">RouterOptions</span> <span class="p">{</span>
  <span class="nl">lookUp</span><span class="p">:</span> <span class="nx">LookUp</span><span class="p">;</span>
  <span class="nl">message</span><span class="p">:</span> <span class="nx">Message</span><span class="p">;</span>
<span class="p">}</span>
</code></pre>
<p>router is a tool for picking the best service base on given criteria.</p>

<ul>
<li>lookUp - The function that finds <a href="#endpoint">Endpoint</a> by given criteria.</li>
<li>message - metadata, contain criteria for picking the <a href="#endpoint">Endpoint</a></li>
</ul>
<h3 id='default'>default</h3>
<p>pick the first available item.</p>
<h3 id='roundrobin'>RoundRobin</h3>
<p>pick the next item from a list of available items.</p>
<h2 id='message'>Message</h2><pre class="highlight typescript tab-typescript"><code><span class="kr">interface</span> <span class="nx">Message</span> <span class="p">{</span>
  <span class="nl">qualifier</span><span class="p">:</span> <span class="kr">string</span><span class="p">;</span>
  <span class="nl">data</span><span class="p">:</span> <span class="kr">any</span><span class="p">[];</span>
<span class="p">}</span>
</code></pre><pre class="highlight javascript tab-javascript"><code><span class="kr">const</span> <span class="nx">message</span> <span class="o">=</span> <span class="p">{</span>
  <span class="na">qualifier</span> <span class="p">:</span> <span class="s1">'Service/someMethod'</span><span class="p">,</span>
  <span class="na">data</span><span class="p">:</span> <span class="p">[</span><span class="s1">'value'</span><span class="p">]</span>
<span class="p">}</span>
</code></pre>
<p>structure of the data in scalecube.</p>

<ul>
<li>qualifier - The combination of serviceName and methodName: <serviceName/methodName></li>
<li>data - Arguments of the invoked function.</li>
</ul>
<h2 id='lookup'>LookUp</h2><pre class="highlight typescript tab-typescript"><code><span class="kd">type</span> <span class="nx">LookUp</span> <span class="o">=</span> <span class="p">(</span><span class="nx">options</span><span class="p">:</span> <span class="nx">LookupOptions</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="nx">Endpoint</span><span class="p">[]</span> <span class="o">|</span> <span class="p">[];</span>

<span class="kr">interface</span> <span class="nx">LookupOptions</span> <span class="p">{</span>
  <span class="nl">qualifier</span><span class="p">:</span> <span class="kr">string</span><span class="p">;</span>
<span class="p">}</span>
</code></pre>
<p>Search for <a href="#endpoint">endPoints</a> in the registry that match the qualifier.</p>

<ul>
<li>qualifier - The combination of serviceName and methodName: <serviceName/methodName></li>
</ul>
<h2 id='microservice'>Microservice</h2><pre class="highlight typescript tab-typescript"><code><span class="kd">type</span> <span class="nx">CreateMicroservice</span> <span class="o">=</span> <span class="p">(</span><span class="nx">options</span><span class="p">:</span> <span class="nx">MicroserviceOptions</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="nx">Microservice</span><span class="p">;</span>

<span class="k">export</span> <span class="kr">interface</span> <span class="nx">Microservice</span> <span class="p">{</span>
  <span class="nl">destroy</span><span class="p">:</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="nb">Promise</span><span class="o">&lt;</span><span class="kr">any</span><span class="o">&gt;</span><span class="p">;</span>
  <span class="nl">createProxies</span><span class="p">:</span> <span class="nx">CreateProxies</span><span class="p">;</span>
  <span class="nl">createProxy</span><span class="p">:</span> <span class="nx">CreateProxy</span><span class="p">;</span>
  <span class="nl">createServiceCall</span><span class="p">:</span> <span class="nx">CreateServiceCall</span><span class="p">;</span>
<span class="p">}</span>

<span class="k">export</span> <span class="kr">interface</span> <span class="nx">MicroserviceOptions</span> <span class="p">{</span>
  <span class="nx">services</span><span class="p">?:</span> <span class="nx">Service</span><span class="p">[];</span>
  <span class="nx">seedAddress</span><span class="p">?:</span> <span class="nx">Address</span> <span class="o">|</span> <span class="kr">string</span><span class="p">;</span>
  <span class="nx">address</span><span class="p">?:</span> <span class="nx">Address</span> <span class="o">|</span> <span class="kr">string</span><span class="p">;</span>
  <span class="nx">transport</span><span class="p">?:</span> <span class="nx">Transport</span><span class="p">;</span>
  <span class="nx">cluster</span><span class="p">?:</span> <span class="p">(</span><span class="nx">opt</span><span class="p">:</span> <span class="nx">ClusterOptions</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="nx">Cluster</span><span class="p">;</span>
  <span class="nx">debug</span><span class="p">?:</span> <span class="kr">boolean</span><span class="p">;</span>
<span class="p">}</span>
</code></pre>
<ul>
<li>destroy - The method is used to delete a microservice and close all the subscriptions related with it.</li>
<li>createProxies - Create a map of proxies or Promises to proxy. (deepened on configuration)</li>
<li>createProxy - Creates a proxy to a method and provides extra logic when is invoked.</li>
<li><p>createServiceCall - Exposes serviceCall to a user (not via Proxy)</p></li>
<li><p>services - An array of services, that will exist inside a microservice container</p></li>
<li><p>seedAddress - The seedAddress is an address of another microservice container in our distributed env.</p></li>
<li><p>address - An address for this microservice instance, other microservices can use this address to connect with this microservice container.</p></li>
<li><p>transport - a module that implements MicroserviceTransport.</p></li>
<li><p>cluster - a module that implements Cluster API</p></li>
<li><p>debug - add logs</p></li>
</ul>
<h2 id='endpoint'>Endpoint</h2><pre class="highlight typescript tab-typescript"><code><span class="kr">interface</span> <span class="nx">Endpoint</span> <span class="p">{</span>
  <span class="nl">qualifier</span><span class="p">:</span> <span class="kr">string</span><span class="p">;</span>
  <span class="nl">serviceName</span><span class="p">:</span> <span class="kr">string</span><span class="p">;</span>
  <span class="nl">methodName</span><span class="p">:</span> <span class="kr">string</span><span class="p">;</span>
  <span class="nl">asyncModel</span><span class="p">:</span> <span class="nx">AsyncModel</span><span class="p">;</span>
  <span class="nl">address</span><span class="p">:</span> <span class="nx">Address</span><span class="p">;</span>
<span class="p">}</span>
</code></pre>
<p>Endpoint is the metadata of a service.<br>
Contain information of how to access the service.</p>

<ul>
<li>qualifier - The combination of serviceName and methodName: <serviceName/methodName></li>
<li>serviceName - The name of a service, that is provided in serviceDefinition.</li>
<li>methodName - The name of a method, that is provided in the methods map in serviceDefinition.</li>
<li>asyncModel - Type of communication between a consumer and a provider.</li>
<li>address - A unique <a href="#address">address</a> of an endpoint URI format: <protocol>://<host>:<port>/<path></li>
</ul>
<h2 id='asyncmodel'>AsyncModel</h2><pre class="highlight typescript tab-typescript"><code>
<span class="kd">type</span> <span class="nx">RequestStreamAsyncModel</span> <span class="o">=</span> <span class="s1">'requestStream'</span><span class="p">;</span>

<span class="kd">type</span> <span class="nx">RequestResponseAsyncModel</span> <span class="o">=</span> <span class="s1">'requestResponse'</span><span class="p">;</span>

<span class="kd">type</span> <span class="nx">AsyncModel</span> <span class="o">=</span> <span class="nx">RequestStreamAsyncModel</span> <span class="o">|</span> <span class="nx">RequestResponseAsyncModel</span><span class="p">;</span>
</code></pre>
<p>AsyncModel is the way a service can be resolved.<br>
It can be a stream and use <code>requestStream</code>
or can be a promise and use <code>requestResponse</code></p>

<ul>
<li>RequestStreamAsyncModel - Defines Stream asyncModel ( Observable, Flowable , etc.. ).</li>
<li>RequestResponseAsyncModel - Defines Async asyncModel ( Promise ).</li>
</ul>
<h2 id='address'>Address</h2><pre class="highlight typescript tab-typescript"><code><span class="kr">interface</span> <span class="nx">Address</span> <span class="p">{</span>
  <span class="nl">host</span><span class="p">:</span> <span class="kr">string</span><span class="p">;</span>
  <span class="nl">port</span><span class="p">:</span> <span class="kr">number</span><span class="p">;</span>
  <span class="nl">protocol</span><span class="p">:</span> <span class="kr">string</span><span class="p">;</span>
  <span class="nl">path</span><span class="p">:</span> <span class="kr">string</span><span class="p">;</span>
<span class="p">}</span>
</code></pre>
<p>Address is the URI for the service.</p>

<ul>
<li>host - unique identifier that allows other computers to access it.</li>
<li>port - determine on which port number the server will receive the data.</li>
<li>protocol - rules for communication between server and client (ws | pm | tcp)</li>
<li>path - relative address.</li>
</ul>
<h2 id='service'>Service</h2><pre class="highlight typescript tab-typescript"><code><span class="kr">interface</span> <span class="nx">Service</span> <span class="p">{</span>
  <span class="nl">definition</span><span class="p">:</span> <span class="nx">ServiceDefinition</span><span class="p">;</span>
  <span class="nl">reference</span><span class="p">:</span> <span class="nx">ServiceReference</span><span class="p">;</span>
<span class="p">}</span>
</code></pre>
<p>Service is combination of contract and the reference that uphold the contract.  </p>

<ul>
<li>definition - metadata that define the service.</li>
<li>reference - code of the service</li>
</ul>
