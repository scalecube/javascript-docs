<h1 id='advance-usage'>Advance usage</h1><h2 id='remotecall'>remoteCall</h2><pre class="highlight javascript tab-javascript"><code><span class="nx">createMicroservice</span><span class="p">({</span>
  <span class="na">services</span><span class="p">:</span> <span class="p">[{</span>
    <span class="na">definition</span><span class="p">:</span> <span class="nx">serviceDefinition</span><span class="p">,</span>
    <span class="na">reference</span> <span class="p">:</span> <span class="k">new</span> <span class="nx">Service</span><span class="p">()</span>
  <span class="p">}],</span>
  <span class="na">address</span><span class="p">:</span> <span class="s1">'A'</span>
<span class="p">});</span>

<span class="kr">const</span> <span class="nx">localMs</span> <span class="o">=</span> <span class="nx">createMicroservice</span><span class="p">({</span>
  <span class="na">seedAddress</span><span class="p">:</span> <span class="s1">'A'</span>
<span class="p">});</span>

<span class="kr">const</span> <span class="nx">proxyA</span> <span class="o">=</span> <span class="nx">localMs</span><span class="p">.</span><span class="nx">createProxy</span><span class="p">({</span><span class="nx">serviceDefinition</span><span class="p">});</span>

<span class="nx">proxyA</span><span class="p">.</span><span class="nx">someMethod</span><span class="p">().</span><span class="nx">then</span><span class="p">(</span><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">);</span>
</code></pre>
<p>remoteCall is a request for a service that located in different microservice container in our <a href="#distributed-environment">distributed environment</a></p>
<h2 id='dependency-hook'>dependency hook</h2><pre class="highlight typescript tab-typescript"><code><span class="kd">type</span> <span class="nx">ServiceFactory</span> <span class="o">=</span> <span class="p">({</span> <span class="nx">createProxy</span><span class="p">,</span> <span class="nx">createServiceCall</span> <span class="p">}:</span> <span class="nx">ServiceFactoryOptions</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="nx">ServiceObject</span><span class="p">;</span>

<span class="kr">interface</span> <span class="nx">ServiceFactoryOptions</span> <span class="p">{</span>
  <span class="nl">createProxy</span><span class="p">:</span> <span class="nx">CreateProxy</span><span class="p">;</span>
  <span class="nl">createServiceCall</span><span class="p">:</span> <span class="nx">CreateServiceCall</span><span class="p">;</span>
<span class="p">}</span>

<span class="kr">interface</span> <span class="nx">ServiceObject</span> <span class="p">{</span>
  <span class="kd">constructor</span><span class="p">?:</span> <span class="kr">any</span><span class="p">;</span>

  <span class="p">[</span><span class="nx">methodName</span><span class="p">:</span> <span class="kr">string</span><span class="p">]:</span> <span class="kr">any</span><span class="p">;</span>
<span class="p">}</span>
</code></pre><pre class="highlight javascript tab-javascript"><code><span class="kr">import</span> <span class="p">{</span> <span class="nx">createMicroservice</span><span class="p">,</span> <span class="nx">ASYNC_MODEL_TYPES</span> <span class="p">}</span> <span class="nx">from</span> <span class="s1">'@scalecube/scalecube@scalecube/scalecube-microservice'</span><span class="p">;</span>
  <span class="kr">const</span> <span class="nx">definitionA</span> <span class="o">=</span> <span class="p">{</span>
    <span class="na">serviceName</span><span class="p">:</span> <span class="s1">'serviceA'</span><span class="p">,</span>
    <span class="na">methods</span><span class="p">:</span> <span class="p">{</span>
      <span class="na">someMethodA</span><span class="p">:</span> <span class="p">{</span>
        <span class="na">asyncModel</span><span class="p">:</span> <span class="nx">ASYNC_MODEL_TYPES</span><span class="p">.</span><span class="nx">REQUEST_RESPONSE</span><span class="p">,</span>
      <span class="p">},</span>
    <span class="p">},</span>
  <span class="p">};</span>

  <span class="kr">const</span> <span class="nx">definitionB</span> <span class="o">=</span> <span class="p">{</span>
    <span class="na">serviceName</span><span class="p">:</span> <span class="s1">'serviceB'</span><span class="p">,</span>
    <span class="na">methods</span><span class="p">:</span> <span class="p">{</span>
      <span class="na">someMethodB</span><span class="p">:</span> <span class="p">{</span>
        <span class="na">asyncModel</span><span class="p">:</span> <span class="nx">ASYNC_MODEL_TYPES</span><span class="p">.</span><span class="nx">REQUEST_RESPONSE</span><span class="p">,</span>
      <span class="p">},</span>
    <span class="p">},</span>
  <span class="p">};</span>

  <span class="kr">class</span> <span class="nx">ServiceB</span> <span class="p">{</span>
    <span class="nx">constructor</span><span class="p">(</span><span class="nx">proxyA</span><span class="p">)</span> <span class="p">{</span>
      <span class="c1">// work with proxy to serviceA</span>
      <span class="nx">proxyA</span><span class="p">.</span><span class="nx">someMethodA</span><span class="p">().</span><span class="nx">then</span><span class="p">(</span><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">);</span>
    <span class="p">}</span>
  <span class="p">}</span>

<span class="nx">createMicroservice</span><span class="p">({</span>
  <span class="na">services</span><span class="p">:</span> <span class="p">[</span>
    <span class="p">{</span>
      <span class="na">definition</span><span class="p">:</span> <span class="nx">definitionA</span><span class="p">,</span>
      <span class="na">reference</span> <span class="p">:</span> <span class="p">{</span> <span class="nx">someMethodA</span><span class="p">}</span>
    <span class="p">},</span>
    <span class="p">{</span>
      <span class="na">definition</span><span class="p">:</span> <span class="nx">definitionB</span><span class="p">,</span>
      <span class="na">reference</span><span class="p">:</span> <span class="p">({</span> <span class="nx">createProxy</span><span class="p">,</span> <span class="nx">createServiceCall</span> <span class="p">})</span> <span class="o">=&gt;</span> <span class="p">{</span>
        <span class="kr">const</span> <span class="nx">proxyA</span> <span class="o">=</span> <span class="nx">createProxy</span><span class="p">({</span><span class="na">serviceDefinition</span><span class="p">:</span> <span class="nx">definitionA</span> <span class="p">});</span>

        <span class="k">return</span> <span class="k">new</span> <span class="nx">ServiceB</span><span class="p">(</span><span class="nx">proxyA</span><span class="p">);</span>
      <span class="p">}</span>
    <span class="p">}</span>    
  <span class="p">]</span>
<span class="p">})</span>
</code></pre>
<p>dependency hook is used if your service deepened on another service,<br>
or if you want to add life cycle to your bootstrap process.</p>
<h2 id='gateway'>gateway</h2><pre class="highlight typescript tab-typescript"><code><span class="kd">type</span> <span class="nx">RequestHandler</span> <span class="o">=</span> <span class="p">(</span><span class="nx">serviceCall</span><span class="p">:</span> <span class="nx">ServiceCall</span><span class="p">,</span> <span class="nx">data</span><span class="p">:</span> <span class="kr">any</span><span class="p">,</span> <span class="nx">subscriber</span><span class="p">:</span> <span class="kr">any</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="k">void</span><span class="p">;</span>

<span class="kr">interface</span> <span class="nx">GatewayOptions</span> <span class="p">{</span>
  <span class="nl">port</span><span class="p">:</span> <span class="kr">number</span><span class="p">;</span>
  <span class="nx">requestResponse</span><span class="p">?:</span> <span class="nx">RequestHandler</span><span class="p">;</span>
  <span class="nx">requestStream</span><span class="p">?:</span> <span class="nx">RequestHandler</span><span class="p">;</span>
<span class="p">}</span>

<span class="kr">interface</span> <span class="nx">GatewayStartOptions</span> <span class="p">{</span>
  <span class="nl">serviceCall</span><span class="p">:</span> <span class="nx">ServiceCall</span><span class="p">;</span>
<span class="p">}</span>

<span class="kr">interface</span> <span class="nx">Gateway</span> <span class="p">{</span>
  <span class="nl">start</span><span class="p">:</span> <span class="p">(</span><span class="nx">options</span><span class="p">:</span> <span class="nx">GatewayStartOptions</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="k">void</span><span class="p">;</span>
  <span class="nl">stop</span><span class="p">:</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="k">void</span><span class="p">;</span>
<span class="p">}</span>
</code></pre><pre class="highlight javascript tab-javascript"><code><span class="kr">import</span> <span class="p">{</span><span class="nx">Gateway</span><span class="p">}</span> <span class="nx">from</span> <span class="s1">'@scalecube/rsocket-ws-gateway'</span><span class="p">;</span>
<span class="kr">import</span> <span class="p">{</span><span class="nx">createMicroservice</span><span class="p">}</span> <span class="nx">from</span> <span class="s1">'@scalecube/scalecube-microservice'</span><span class="p">;</span>

<span class="kr">const</span> <span class="nx">gateway</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Gateway</span><span class="p">({</span><span class="na">port</span> <span class="p">:</span> <span class="mi">3000</span><span class="p">});</span>
<span class="kr">const</span> <span class="nx">serviceCall</span> <span class="o">=</span> <span class="nx">createMicroservice</span><span class="p">({</span>
  <span class="na">services</span><span class="p">:</span> <span class="p">[{</span>
    <span class="na">reference</span><span class="p">:</span> <span class="k">new</span> <span class="nx">Service</span><span class="p">(),</span>
    <span class="na">definition</span><span class="p">:</span> <span class="nx">serviceDefinition</span>
  <span class="p">}]</span>
<span class="p">}).</span><span class="nx">createServiceCall</span><span class="p">({});</span>

<span class="nx">gateway</span><span class="p">.</span><span class="nx">start</span><span class="p">({</span><span class="nx">serviceCall</span><span class="p">});</span>
</code></pre>
<p>Its a technique to centralize all the requests that are coming from outside of the distributed environment.</p>

<p>scalecube provide gateway implementation base on RSocketWebsocket.</p>

<ul>
<li>port - The gateway will listen to it.</li>
<li>requestResponse - handle requestResponse requests.</li>
<li><p>requestStream - handle requestStream requests.</p></li>
<li><p><a href="#createservicecall">serviceCall</a> - low level approach for requesting a service in the distributed environment.</p></li>
<li><p>start - start the gateway.</p></li>
<li><p>stop - stop the gateway.</p></li>
</ul>
